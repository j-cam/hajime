@charset "UTF-8";
/*
=========================================================================================
	SASS ARCHITECTURE
	directory naming based on a combination of
	-- patterlab-php
	--- https://github.com/pattern-lab/patternlab-php/tree/master/core/source/_patterns
 	-- SMACCS
 	--- https://github.com/minamarkham/sassy-starter
=========================================================================================
*/
/*
============================================
	CSS/SASS STYLE GUIDE
	Use BEM Syntax
	Primer: https://css-tricks.com/bem-101/
============================================
	// Block component
	.btn {}

	// Element that depends upon the block
	.btn__price {}

	// Modifier that changes the style of the block
	.btn--orange {}
	.btn--big {}

	// HTML
	// <a class="btn btn--big btn--orange" href="http://css-tricks.com">
	//   <span class="btn__price">$9.99</span>
	//   <span class="btn__text">Subscribe</span>
	// </a>

	// ------------------------
		SASS SHORTHAND BEM BLOCK
	// ------------------------
	// Block component
	.block {

	    // Element that depends upon the block
	    &__element {
	       //some styles here
	    }

		// Modifier that changes the style of the block
	    &--mod {
	       //some styles here
	    }
	}

============================================== */
/*
==========================================
	SASS IMPORTS
==========================================
*/
/* ------------------------------------------
	UTILITIES
	dynamic tools for generating output
--------------------------------------------- */
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/* END CANVAS VARIABLES */
/**
 * Define width for browsers w/out media query support
 * @link http://jakearchibald.github.com/sass-ie/
 * @type boolean
 */
/**
 * Turn on/off IE specific styles
 * @link http://jakearchibald.github.com/sass-ie/
 * @type boolean
 */
/**
 * Define z-indexes for various elements
 * @link http://www.sitepoint.com/using-sass-maps/
 * @type number
 */
/**
 * SMACSS Theming
 * @example scss
 * .foobar {
 *   background: #ff3377;
 *   @include theme(beccapurple){
 *     background: #663399;
 *   }
 * }
 * @param {String} $name - theme name
 */
/**
 * Buttons
 * This customises your buttons with a different background color and text color.
 * If no text color is specified it will default to white.
 * @param {String} $color-background - background color
 * @param {String} $color-text (#fff) - text color
 * @example scss
 * .foobar { @include btn(#f37) { ... } }
 */
/**
 * Media Queries
 * Allows you to use inline media queries.
 * @link http://jakearchibald.github.com/sass-ie/
 * @param {String} $breakpoint - breakpoint
 * @param {String} $query (min-width) - query type
 * @param {String} $type (screen) - media type
 * @example scss
 * .foobar { @include mq(20em) { ... } }
 */
/**
 * IE Specific Styles
 * @example scss
 * .foobar {
 *   .lt-ie8 & { @include old-ie { ... } }
 *   .lt-ie9 & { @include old-ie { ... } }
 * }
 */
/**
 * Sass version of Sticky Footer by Ryan Fait
 * @link http://ryanfait.com/sticky-footer/
 * @param {String} $footer_height - height of footer including padding or borders
 * @param {String} $root_selector (.site) - main wrapper element
 * @param {String} $root_footer_selector (.push) - hidden element that "pushes" down the footer
 * @param {String} $footer_selector (footer) - footer element
 * @example scss
 * .foobar { @include sticky-footer(4em) { ... } }
 */
/**
 * Fullscreen Background for < IE8
 * @link http://css-tricks.com/perfect-full-page-background-image/
 * @example scss
 * .foobar { @include fullscreen-bg() { ... } }
 */
/**
 * @param {number} $opacity
 * @example scss
 * .foobar { @include opacity(4) { ... } }
 */
/**
 * @link http://bit.ly/thoughtbot-bourbon-inline-block
 * @require {mixin} old-ie
 * @param {String} $alignment (baseline)
 * @example scss
 * .foobar { @include inline-block() { ... } }
 */
/**
 * Retina Displays
 * @param {String} $image - image url
 * @param {String} $width - image width
 * @param {String} $height - image height
 * @example scss
 * .foobar { @include image-2x('img/logo.png', 200px, 300px) { ... } }
 */
/**
 * RGBA Fallback
 * @param {String} $color
 * @param {String} $percent
 * @example scss
 * .foobar { @include rgba-bg(#f37,.9) { ... } }
 */
/**
 * px to em conversion
 * @link http://www.pjmccormick.com/sweet-sass-function-convert-px-em
 * @requires {variable} $base-font-size
 * @param {number} $target - size to convert
 * @param {number} $context ($base-font-size) - context conversion is based on
 * @example scss
 * .foobar { padding-bottom: em(30); }
 * @returns {number}
 */
/**
 * px to rem
 * @link http://www.pjmccormick.com/sweet-sass-function-convert-px-em
 * @requires {variable} $base-font-size
 * @param {number} $target - size to convert
 * @param {number} $context ($base-font-size) - context conversion is based on
 * @example scss
 * .foobar { padding-bottom: rem(30); }
 * @returns {number}
 */
/**
 * em to px conversion
 * @link http://www.pjmccormick.com/sweet-sass-function-convert-px-em
 * @requires {variable} $base-font-size
 * @param {number} $target - size to convert
 * @param {number} $context ($base-font-size) - context conversion is based on
 * @example scss
 * .foobar { padding-bottom: px(30); }
 * @returns {number}
 */
/**
 * Aspect Ratio
 * @param {number} $ratio-numerator - ratio numerator
 * @param {number} $ratio-denominator - ratio denominator
 * @example scss
 * .foobar { padding-bottom: aspect-ratio(16,9); } // @returns 56.25%
 * @returns {number}
 */
/**
 * Aspect Ratio
 * Based on Fixed Image Dimensions
 * @param {number} $w - image width
 * @param {number} $h - image height
 * @example scss
 * .foobar { padding: 0 0 aspect-ratio-fixed(1080, 720); } // @returns 66.666666666667%
 * @returns {number}
 */
/**
 * Context Calculator
 * @param {number} $target
 * @param {number} $context
 * @example scss
 * .foobar { padding-bottom: context-calc(30,15); }
 * @returns {number}
 */
/**
 * Strip Unit Values
 * @link http://hugogiraudel.com/2013/08/12/sass-functions
 * @param {string} $num
 * @example scss
 * .foobar { padding-bottom: strip-unit(30px); }
 * @returns {number}
 */
/* ------------------------------------------
	GRID SYSTEM: Susy 2
	Responsive layout toolkit for Sass

	Documentation: http://susydocs.oddbird.net/en/latest/
	Git Repo: https://github.com/ericam/susy

--------------------------------------------- */
*, *:before, *:after {
  box-sizing: border-box; }

/* ------------------------------------------
	MEDIA QUERIES: Breakpoint-Sass
	Really Simple, Organized, Media Queries with Sass

	Documentation: http://breakpoint-sass.com/
	Git Repo: https://github.com/at-import/breakpoint

--------------------------------------------- */
/* ---------------------------------

	BASE

	A Base rule is applied to an element using an element selector, a
	descendent selector, or a child selector, along with any pseudo-classes.
	It doesn’t include any class or ID selectors. It is defining the default
	styling for how that element should look in all occurrences on the page.


------------------------------------ */
html, body {
  -webkit-overflow-scrolling: touch; }

html {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  min-height: 100%;
  box-sizing: border-box;
  min-height: 100%;
  font-size: 100%; }
  html:after {
    content: " ";
    display: block;
    clear: both; }

body {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  min-height: 100%;
  font-family: "museo-sans", "Helvetica", Arial, sans-serif;
  color: #000;
  font-size: 1em;
  line-height: 1.375;
  word-wrap: break-word;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  /* Firefox 25+ */ }
  body:after {
    content: " ";
    display: block;
    clear: both; }

*,
*:before,
*:after {
  box-sizing: inherit; }

p {
  font-family: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;
  margin-top: 0;
  margin-bottom: 0.9375em; }

a {
  color: #000; }

img {
  height: auto;
  /* Make sure images are scaled correctly. */
  max-width: 100%;
  /* Adhere to container width. */
  vertical-align: bottom; }

/* Bicubic resizing for non-native sized IMG: code.flickr.com/blog/2008/11/12/on-ui-quality-the-little-things-client-side-image-resizing/ */
.ie7 img {
  -ms-interpolation-mode: bicubic; }

hr {
  width: 100%;
  height: 0;
  display: block;
  border: 0;
  border-top: 1px solid #d4d4d2;
  border-top: 1px solid #d4d4d2; }

blockquote, q, i, em {
  font-style: italic; }

sup {
  top: 0; }

embed,
iframe,
video {
  max-width: 100%; }

video {
  height: auto; }

h1, h2, h3, h4, h5, h6 {
  font-family: "museo-sans", "Helvetica", Arial, sans-serif;
  font-style: normal; }
  h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {
    text-decoration: none; }
    h1 a:hover, h2 a:hover, h3 a:hover, h4 a:hover, h5 a:hover, h6 a:hover {
      text-decoration: underline; }

h1 {
  font-size: 24px;
  font-size: 2.4rem;
  line-height: 1.25;
  margin-top: 0; }

h2 {
  font-size: 1.125em;
  line-height: 1.66667; }

h3, h4, h5, h6 {
  font-size: 1em;
  line-height: 1.21429; }

ul, ol {
  margin: 0 0 1.5em 3em; }

ul {
  list-style: disc; }

ol {
  list-style: decimal; }

li > ul,
li > ol {
  margin-bottom: 0;
  margin-left: 1.5em; }

dt {
  font-weight: bold; }

dd {
  margin: 0 1.5em 1.5em; }

table {
  border-spacing: 0;
  width: 100%;
  border: 1px solid #eee;
  border-radius: 4px;
  background: #fff;
  box-shadow: 0 1px 2px 0 white;
  -webkit-box-shadow: 0 1px 2px 0 white;
  border-collapse: separate;
  margin-bottom: 1.5em; }
  table td, table th {
    padding: 0.857em 1.387em;
    text-align: left;
    border-right: 1px dotted #eee;
    vertical-align: top; }
    table td p:last-child, table th p:last-child {
      margin-bottom: 0; }
  table thead th {
    background: #fafafa;
    border-right: 1px solid #eee;
    border-bottom: 1px solid #eee;
    text-transform: uppercase;
    padding: 1.387em;
    vertical-align: middle; }
  table tr th:last-child, table tr td:last-child {
    border-right: 0; }
  table tbody th {
    background: #fafafa;
    border-bottom: 1px solid #eee; }
  table tbody td {
    border-bottom: 1px solid #eee; }
  table tbody tr:last-child td {
    border-bottom: 0; }
  table tbody tr:last-child th {
    border-bottom: 0; }

input[type="text"],
input[type="email"],
input[type="url"],
input[type="password"],
input[type="search"],
textarea {
  font-size: 16px;
  font-size: 1.6rem;
  font-family: inherit;
  color: inherit;
  border: 1px solid inherit;
  border-radius: 3px; }
  input[type="text"]:focus,
  input[type="email"]:focus,
  input[type="url"]:focus,
  input[type="password"]:focus,
  input[type="search"]:focus,
  textarea:focus {
    color: inherit; }

input[type="text"],
input[type="email"],
input[type="url"],
input[type="password"],
input[type="search"] {
  padding: 3px; }

textarea {
  padding-left: 3px;
  width: 100%; }

button,
input[type="button"],
input[type="reset"],
input[type="submit"] {
  border: none;
  border-radius: 0;
  box-shadow: none; }

/* ------------------------------------------

	LAYOUT

	Layout styles can also be divided into major and minor styles based on
	reuse. Major layout styles such as header and footer are traditionally
	styled using ID selectors but take the time to think about the elements
	that are common across all components of the page and use class selectors
	where appropriate.

--------------------------------------------- */
#global__wrapper {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  min-height: 100%; }
  #global__wrapper:after {
    content: " ";
    display: block;
    clear: both; }

#global__header {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0; }
  #global__header:after {
    content: " ";
    display: block;
    clear: both; }

#global__main {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding: 86px 0 0 0; }
  #global__main:after {
    content: " ";
    display: block;
    clear: both; }

#global__footer {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto; }
  #global__footer:after {
    content: " ";
    display: block;
    clear: both; }

.page-content__left {
  width: 66%;
  float: left; }
  @media all and (max-width: 767px) {
    .page-content__left {
      width: 100%;
      float: none; } }

.page-content__right {
  width: 18.30161%;
  float: right; }
  @media all and (max-width: 767px) {
    .page-content__right {
      width: 100%;
      float: none; } }

/* ----------------------------------------
	MODULES

	A Module is a more discrete component of the page. It is your
	navigation bars and your carousels and your dialogs and your widgets
	and so on. This is the meat of the page.

	Modules sit inside Layout components.
	Modules can sometimes sit within other Modules, too.

	Each Module should be designed to exist as a standalone
	component. In doing so, the page will be more flexible. If done right,
	Modules can easily be moved to different parts of the layout without
	breaking.

	When defining the rule set for a module, avoid using IDs and element
	selectors, sticking only to class names. A module will likely contain a
	number of elements and there is likely to be a desire to use descendent
	or child selectors to target those elements.
------------------------------------------- */
.site-nav {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  /**
	 * [$site_nav_items description]
	 * @type {SASS MAP}
	 * @key child_number
	 * @value opacity
	 */
  /**
	 * Output decreasing opacity for each child element
	 */ }
  .site-nav:after {
    content: " ";
    display: block;
    clear: both; }
  .site-nav__list {
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;
    margin: 0 0 0 0;
    padding: 0 0 0 0;
    list-style: none; }
    .site-nav__list:after {
      content: " ";
      display: block;
      clear: both; }
  .site-nav__item {
    box-sizing: border-box;
    width: 20%;
    float: left;
    padding-left: 2%;
    padding-right: 2%; }
    @media (max-width: 960px) {
      .site-nav__item {
        box-sizing: border-box;
        width: 100%;
        float: left;
        padding-left: 2%;
        padding-right: 2%; } }
  .site-nav__item:nth-child(1) {
    background: black; }
  .site-nav__item:nth-child(2) {
    background: rgba(0, 0, 0, 0.9); }
  .site-nav__item:nth-child(3) {
    background: rgba(0, 0, 0, 0.8); }
  .site-nav__item:nth-child(4) {
    background: rgba(0, 0, 0, 0.7); }
  .site-nav__item:nth-child(5) {
    background: rgba(0, 0, 0, 0.6); }
  .site-nav__item:nth-child(6) {
    background: rgba(0, 0, 0, 0.5); }

.site-nav__desktop {
  height: 86px; }
  .site-nav__desktop .site-nav__list {
    height: 100%; }
  .site-nav__desktop .site-nav__item {
    height: 100%; }

.octo-code {
  font-family: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;
  width: 100%;
  text-align: center;
  font-size: 11px;
  font-size: 1.1rem;
  margin: 1.25em 1.25em 0.75em 1.25em; }

/**
 * Sign up form that looks
 * like a signature
 */
/*

.block {
    &__element {
       //some styles here
    }

    &--mod {
       //some styles here
    }
}

*/
.sign-up {
  width: 100%;
  display: block;
  font-family: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;
  margin: 0 auto 0 auto;
  padding: 3px;
  color: #fff; }
  .sign-up form {
    width: 100%; }

.sign-up__form {
  color: #fff; }
  .sign-up__form h2 {
    font-size: 1.5em;
    line-height: 1.58333;
    margin: 0 0 0 0;
    font-family: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;
    font-weight: 500;
    color: #000; }
  .sign-up__form .message {
    font-size: 0.75em;
    padding-top: 9px;
    color: #000;
    text-align: left; }
  .sign-up__form .input__wrapper--inline {
    width: 100%;
    height: 30px;
    margin-top: 10px;
    border-bottom: 2px solid #000;
    background-color: transparent;
    background-position: 4px -2px;
    background-repeat: no-repeat;
    background-image: url("../assets/x.png"); }
    .sign-up__form .input__wrapper--inline:after {
      content: "";
      display: table;
      clear: both; }
  .sign-up__form input#email {
    width: 335px;
    max-width: 335px;
    padding: 0 0 0 0;
    background: transparent;
    border: none;
    margin-bottom: 0;
    float: left;
    margin-left: 42px;
    color: #000;
    line-height: 23px;
    font-size: 0.75em; }
    .sign-up__form input#email:focus {
      outline: 0; }
    @media only screen and (max-width: 515px) {
      .sign-up__form input#email {
        max-width: 70%; } }
    @media only screen and (max-width: 400px) {
      .sign-up__form input#email {
        max-width: 60%; } }
  .sign-up__form .form-feedback {
    display: block;
    height: 22px;
    color: #000;
    font-size: 0.75em;
    text-transform: lowercase; }
  .sign-up__form button.submit-button {
    background: transparent;
    border: none;
    color: #000;
    float: right;
    padding: 0 0 0 0;
    line-height: 23px;
    font-size: 0.75em; }
    .sign-up__form button.submit-button:focus {
      outline: 0; }
    .sign-up__form button.submit-button:hover span {
      text-decoration: underline; }
  .sign-up__form .message.error {
    color: red; }
    .sign-up__form .message.error:before {
      content: " ! "; }
  .sign-up__form .message.success {
    color: green; }
    .sign-up__form .message.success:before {
      content: " "; }
  .sign-up__form .message:before {
    font-weight: normal; }

.footer__octo-code {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  box-sizing: border-box;
  width: 300%;
  float: left;
  padding-left: 2.5%;
  padding-right: 2.5%; }
  .footer__octo-code:after {
    content: " ";
    display: block;
    clear: both; }

.footer__left {
  box-sizing: border-box;
  width: 25%;
  float: left;
  padding-left: 0.83333%;
  padding-right: 0.83333%; }

.footer__middle {
  box-sizing: border-box;
  width: 50%;
  float: left;
  padding-left: 0.83333%;
  padding-right: 0.83333%;
  text-align: center; }

.footer__right {
  box-sizing: border-box;
  width: 25%;
  float: left;
  padding-left: 0.83333%;
  padding-right: 0.83333%;
  text-align: right; }

/* ----------------------------------------
	TEMPLATES
	styles specific to page templates

	AKA Themesfrom SMACCS
	Themes can affect any of the primary types. They can
	override base styles like default link colours. They can change
	module elements such as colours and borders. They can affect
	layout with different arrangements. They can also alter how states look.
----------------------------------------- */
.home-content-wrap {
  max-width: 32.1875em;
  margin: 8% auto 0 auto;
  text-align: center;
  font-family: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace; }
  .home-content-wrap .sign-up {
    margin: 20% auto 0 auto; }

.home-branding {
  width: 50%;
  max-width: 220px;
  margin: 0 auto 2.9375em auto; }
  .home-branding__logo-wrap {
    max-width: 220px; }
  .home-branding__logo-img {
    max-width: 100%; }
  .home-branding__content {
    text-align: center;
    font-size: 16px;
    font-size: 1.6rem;
    font-family: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace; }

.home-messaging .enter-link {
  display: inline-block;
  margin-top: 1.25em;
  padding: 0.625em 1.25em; }

/* ----------------------------------------
	SHAME

	because hacks happen.

	be very specific about what each piece of code is doing, and
	how to better fix it later

----------------------------------------- */

/*# sourceMappingURL=data:application/json;base64, */