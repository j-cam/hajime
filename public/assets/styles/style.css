.hajime{font-weight:600;text-transform:uppercase}.hajime{width:50%;height:50%;overflow:auto;margin:auto;position:absolute;top:0;left:0;bottom:0;right:0}html,body{-webkit-overflow-scrolling:touch}html{min-height:100%;box-sizing:border-box;min-height:100%;font-size:100%}body{min-height:100%;font-family:"museo-sans", "Helvetica", Arial, sans-serif;color:#000;font-size:1em;line-height:1.375;word-wrap:break-word;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}*,*:before,*:after{box-sizing:inherit}p{font-family:"Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;margin-top:0;margin-bottom:0.9375em}a{color:#000}img{height:auto;max-width:100%;vertical-align:bottom}.ie7 img{-ms-interpolation-mode:bicubic}hr{width:100%;height:0;display:block;border:0;border-top:1px solid #d4d4d2;border-top:1px solid #d4d4d2}blockquote,q,i,em{font-style:italic}sup{top:0}embed,iframe,video{max-width:100%}video{height:auto}input[type="text"],input[type="email"],input[type="url"],input[type="password"],input[type="search"],textarea{font-size:16px;font-size:1.6rem;font-family:inherit;color:inherit;border:1px solid inherit;border-radius:3px}input[type="text"]:focus,input[type="email"]:focus,input[type="url"]:focus,input[type="password"]:focus,input[type="search"]:focus,textarea:focus{color:inherit}input[type="text"],input[type="email"],input[type="url"],input[type="password"],input[type="search"]{padding:3px}textarea{padding-left:3px;width:100%}button,input[type="button"],input[type="reset"],input[type="submit"]{border:none;border-radius:0;box-shadow:none}h1,h2,h3,h4,h5,h6{font-family:"museo-sans", "Helvetica", Arial, sans-serif;font-style:normal}h1 a,h2 a,h3 a,h4 a,h5 a,h6 a{text-decoration:none}h1 a:hover,h2 a:hover,h3 a:hover,h4 a:hover,h5 a:hover,h6 a:hover{text-decoration:underline}h1{font-size:24px;font-size:2.4rem;line-height:1.25;margin-top:0}h2{font-size:1.125em;line-height:1.66667}h3,h4,h5,h6{font-size:1em;line-height:1.21429}ul,ol{margin:0 0 1.5em 3em}ul{list-style:disc}ol{list-style:decimal}li>ul,li>ol{margin-bottom:0;margin-left:1.5em}dt{font-weight:bold}dd{margin:0 1.5em 1.5em}table{border-spacing:0;width:100%;border:1px solid #eee;border-radius:4px;background:#fff;box-shadow:0 1px 2px 0 #fff;-webkit-box-shadow:0 1px 2px 0 #fff;border-collapse:separate;margin-bottom:1.5em}table td,table th{padding:0.857em 1.387em;text-align:left;border-right:1px dotted #eee;vertical-align:top}table td p:last-child,table th p:last-child{margin-bottom:0}table thead th{background:#fafafa;border-right:1px solid #eee;border-bottom:1px solid #eee;text-transform:uppercase;padding:1.387em;vertical-align:middle}table tr th:last-child,table tr td:last-child{border-right:0}table tbody th{background:#fafafa;border-bottom:1px solid #eee}table tbody td{border-bottom:1px solid #eee}table tbody tr:last-child td{border-bottom:0}table tbody tr:last-child th{border-bottom:0}html{background:#fff}header,nav,article,footer{padding-top:1em;padding-bottom:1em;background:linear-gradient(rgba(255,0,128,0.125), rgba(255,0,128,0.125)),rgba(255,0,128,0.25);background-clip:content-box, border-box;box-shadow:0 0 0 1px rgba(255,0,128,0.25) inset}body{font-family:helvetica}.page{max-width:100%;margin-left:auto;margin-right:auto}.page:after{content:" ";display:block;clear:both}head{display:block;position:fixed;right:10px;top:10px;z-index:999;color:#333;background:rgba(255,255,255,0.25)}head:before{content:"|||";display:block;padding:5px 10px;font-family:sans-serif;font-size:16px;font-weight:bold}head:hover{background:rgba(255,255,255,0.5);color:red}head:hover ~ .page,head:hover ~ body .page{position:relative}head:hover ~ .page:before,head:hover ~ body .page:before{position:absolute;top:0;left:0;bottom:0;right:0;content:" ";z-index:998;background-image:url("../assets/linear-gradient(to right, blue, #4d4dff 80%, transparent 80%)");background-size:26.31579%;background-origin:content-box;background-clip:content-box;background-position:left top}.header{width:100%;float:left;margin-left:0;margin-right:0}.column{width:32.20339%;float:left;margin-right:1.69492%}.footer{width:100%;float:left;margin-left:0;margin-right:0}#global__wrapper{max-width:100%;margin-left:auto;margin-right:auto;min-height:100%}#global__wrapper:after{content:" ";display:block;clear:both}head:hover ~ #global__wrapper,head:hover ~ body #global__wrapper{position:relative}head:hover ~ #global__wrapper:before,head:hover ~ body #global__wrapper:before{position:absolute;top:0;left:0;bottom:0;right:0;content:" ";z-index:998;background-image:url("../assets/linear-gradient(to right, blue, #4d4dff 80%, transparent 80%)");background-size:26.31579%;background-origin:content-box;background-clip:content-box;background-position:left top}#global__header{max-width:100%;margin-left:auto;margin-right:auto;width:100%;position:fixed;top:0;left:0}#global__header:after{content:" ";display:block;clear:both}head:hover ~ #global__header,head:hover ~ body #global__header{position:relative}head:hover ~ #global__header:before,head:hover ~ body #global__header:before{position:absolute;top:0;left:0;bottom:0;right:0;content:" ";z-index:998;background-image:url("../assets/linear-gradient(to right, blue, #4d4dff 80%, transparent 80%)");background-size:26.31579%;background-origin:content-box;background-clip:content-box;background-position:left top}#global__main{max-width:100%;margin-left:auto;margin-right:auto;padding:86px 0 0 0}#global__main:after{content:" ";display:block;clear:both}head:hover ~ #global__main,head:hover ~ body #global__main{position:relative}head:hover ~ #global__main:before,head:hover ~ body #global__main:before{position:absolute;top:0;left:0;bottom:0;right:0;content:" ";z-index:998;background-image:url("../assets/linear-gradient(to right, blue, #4d4dff 80%, transparent 80%)");background-size:26.31579%;background-origin:content-box;background-clip:content-box;background-position:left top}#global__footer{max-width:100%;margin-left:auto;margin-right:auto}#global__footer:after{content:" ";display:block;clear:both}head:hover ~ #global__footer,head:hover ~ body #global__footer{position:relative}head:hover ~ #global__footer:before,head:hover ~ body #global__footer:before{position:absolute;top:0;left:0;bottom:0;right:0;content:" ";z-index:998;background-image:url("../assets/linear-gradient(to right, blue, #4d4dff 80%, transparent 80%)");background-size:26.31579%;background-origin:content-box;background-clip:content-box;background-position:left top}.page-content__left{width:66%;float:left}@media all and (max-width: 767px){.page-content__left{width:100%;float:none}}.page-content__right{width:18.30161%;float:right}@media all and (max-width: 767px){.page-content__right{width:100%;float:none}}

/*# sourceMappingURL=data:application/json;base64, */